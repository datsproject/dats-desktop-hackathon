const saveVulnerabilityButton = document.querySelector("#saveVulnerability");
const processingVulnerabilityButton = document.querySelector('#processingVulnerability');
const approveVulnerabilitySwitch = document.querySelector("#switchApproveVulnerability");
const webPenetrationCheckbox = document.querySelector("#chkWebPenetration");
const serverPenetrationCheckbox = document.querySelector("#chkServerPenetration");
const scadaPenetrationCheckbox = document.querySelector("#chkScadaPenetration");
const blockchainPenetrationCheckbox = document.querySelector("#chkBlockchainPenetration");
const contractPenetrationCheckbox = document.querySelector("#chkContractPenetration");

contractAbi = JSON.parse(fs.readFileSync(path.join(__dirname, 'contract-abi.json'), 'utf-8'));


webContents.on("did-finish-load", async() => {
    await getVulnerability();
});

async function saveVulnerability(isApprove, webPenetration, serverPenetration, scadaPenetration, blockchainPenetration, contractPenetration, callback) {

    saveVulnerabilityButton.classList.add("d-none");
    processingVulnerabilityButton.classList.remove("d-none");

    const datsContract = await contract(contractAbi, contractAddress);

    const listener = (id, consumer, data) => {
        console.log(`id: ${id}, consumer: ${consumer}, data: ${data}`);
        log.logInfo(`id: ${id}, consumer: ${consumer}, data: ${data}`);
    }

    datsContract.on("VulnerabilitySaved", listener);

    setTimeout(async() => {
        await datsContract.saveVulnerability(isApprove, webPenetration, serverPenetration, scadaPenetration, blockchainPenetration, contractPenetration);
        callback(saveVulnerabilityButton, processingVulnerabilityButton);
    }, 1000);
}

async function getVulnerability() {

    setTimeout(async() => {
        const datsContract = await contract(contractAbi, contractAddress);
        const vulnerabilityData = await datsContract.getVulnerability();
        if (vulnerabilityData) {
            approveVulnerabilitySwitch.checked = vulnerabilityData.isApprove;
            webPenetrationCheckbox.checked = vulnerabilityData.webPenetration;
            serverPenetrationCheckbox.checked = vulnerabilityData.serverPenetration;
            scadaPenetrationCheckbox.checked = vulnerabilityData.scadaPenetration;
            blockchainPenetrationCheckbox.checked = vulnerabilityData.blockchainPenetration;
            contractPenetrationCheckbox.checked = vulnerabilityData.contractPenetration;
        }
    }, 1000);

}

saveVulnerabilityButton.addEventListener('click', async() => {
    await saveVulnerability(
        approveVulnerabilitySwitch.checked,
        webPenetrationCheckbox.checked,
        serverPenetrationCheckbox.checked,
        scadaPenetrationCheckbox.checked,
        blockchainPenetrationCheckbox.checked,
        contractPenetrationCheckbox.checked,
        (saveBtn, processingBtn) => {

            savedSuccessNotify();
            saveBtn.classList.remove("d-none");
            processingBtn.classList.add("d-none");

        });

});